*alti.txt*	補完が常時表示される入力インターフェイス

Author  : LeafCage <leafcage+vim @ gmail.com>
License : MIT license  {{{
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}

==============================================================================
目次						*alti-contents*

概要				|alti-introduction|
使い方				|alti-usage|
変数				|alti-variables|
関数				|alti-functions|
Altiインターフェイス		|alti-Alti-interface|
  Context			  |alti-Context|
  Altiキーマッピング		  |alti-Alti-key-mappings|
TODO				|alti-todo|


==============================================================================
概要						*alti-introduction*

*alti* は補完を動的に表示するインプットインターフェイスです。
|input()|を強力にしたといえば分かり易いでしょう。
|ctrlp.vim|(https://github.com/kien/ctrlp.vim) のインターフェイスを参考に作ら
れました。Thanks! kien.
|ctrlp.vim|や|unite.vim|などが候補の絞り込みと選択を行うインターフェイスなのに
対して、こちらは入力と実行を行うためのインターフェイスです。つまり候補が主か、
入力が主かの違いです。ユーザの入力によって、表示させる候補を動的に変化させるよ
うな入力、複数の引数を取る入力に向きます。

最新版:
https://github.com/LeafCage/alti.vim


==============================================================================
使い方						*alti-usage*

1. altiの定義を作る。(altiはライブラリだからそのままでは動かない。)
2. alti#init()に定義を渡す。
3. altiが動く。
4. <C-n><C-p> (ctrlplike のときは <C-j><C-k>) で候補を選択、通常入力で絞込み、
   <Tab>で選択されている候補を挿入。
5. こうしてコマンドを組み立てたら、<CR>で実行。
6. コマンドを受け取った関数が何かする。やった！


==============================================================================
変数						*alti-variables*

g:alti_available				*g:alti_available*
	既定値: 1
	altiがインストールされているなら普通は 1 に定義される。
	altiを利用するプラグインのうち、alti.vimがインストールされていないとき
	には Altiコマンドを定義しないものは、|after-directory|以下のスクリプト
	からこの値を見て判断することを推奨している。 >
	" after/plugin/foo.vim
	if get(g:, 'alti_available')
	  command! AltiFoo    call ctrlp#init(foo#alti#define())
	endif

<	遅延読み込み(lazy)機能があるプラグインマネージャーを使っているなどで、
	altiを遅延読み込み設定している場合は、ユーザがvimrcなどでこの値を1に定
	義する必要がある。


g:alti_cache_dir				*g:alti_cache_dir*
	既定値: "~/.cache/alti"
	このディレクトリに履歴などのファイルが作成される。


g:alti_max_history				*g:alti_max_history*
	既定値: &history
	記録する履歴の数。標準では'history'オプションの設定に等しい。


g:alti_enable_statusline			*g:alti_enable_statusline*
	既定値: 1
	非0 なら専用のステータスラインを使う。


g:alti_cmpl_window				*g:alti_cmpl_window*
	この辞書によって補完ウィンドウに関する設定する。
	以下のキーを持つことができる。
	--------~
	pos		(文字列)
		ウィンドウの表示位置を "top" か "bottom" で指定できる。
		省略時には "bottom" が利用される。
	order		(文字列)
		候補の並びを "ttb" (上から下へ top to bottom) か "btt" (下から
		上へ bottom to top) で指定する。
		省略時には "ttb" が利用される。
	min_height	(数値)
		ウィンドウの最小の高さ。デフォルトでは 1 が利用される。
	max_height	(数値)
		ウィンドウの最大の高さ。デフォルトでは 10 が利用される。


g:alti_default_mappings_base			*g:alti_default_mappings_base*
	既定値: "standard"
	altiバッファ内で利用されるキーマッピングのベースを選択する。
	値として "standard" か "ctrlplike" を選択できる。
		standard	alti の操作に適したキーマッピング
		ctrlplike	|ctrlp.vim|の標準に似せたキーマッピング
	無効な値を指定した場合は "standard" が使用される。
	ベースとなるキーマッピングとその説明は|alti-Alti-key-mappings|を参照。
	|g:alti_prompt_mappings|でベースとなったマッピングをさらに書き換えるこ
	とができる。


g:alti_prompt_mappings				*g:alti_prompt_mappings*
	キーにキーマップ名、値にキーマッピング文字列のリストを指定した辞書で、
	|alti-Alti-key-mappings|で定義されたキーマッピングを上書きする。
	値に空リストを定義すると、そのキーマッピングは無効となる。
	Example: >
	let g:alti_default_mappings_base = 'ctrlplike'
	let g:alti_prompt_mappings = {
	  \ 'PrtBS()': ['<BS>', '<C-h>'],
	  \ 'ToggleType(1)': ['<C-]>', '<C-Down>'],
	  \ 'ToggleType(-1)': ['<C-\>', '<C-Up>'],
	  \ 'PrtExit()': ['<Esc>', '<C-c>', '<C-g>', '<C-q>'],
	  \ }
<

g:alti_getreg_mappings				*g:alti_getreg_mappings*
	レジスタ挿入モード(標準では<C-r>)で利用できるマッピング。
	通常ここで任意の一文字を入力することでその文字のレジスタを挿入できる。
	しかしここで特殊な文字に特定のレジスタを充てることも可能。
	Example: >
	let g:alti_getreg_mappings = {}
	let g:alti_getreg_mappings['"'] = ['<C-e>']
	let g:alti_getreg_mappings['*'] = ['<C-y>']

<	この例の場合<C-r>の後の<C-e>で レジスタ " が、<C-y>で レジスタ * が挿
	入される。また、以下の特殊キーがセットされている。 >
 {
 \ 'expr': ['='],		<C-r>= Expressionレジスタのように、入力を評価
				しその結果を挿入する。
 \ '<cword>: ['<C-w>'],		<C-r><C-w> 事前のカーソル位置の単語を挿入する
 \ '<cWORD>': ['<C-a>'],	<C-r><C-a> 事前のカーソル位置のWORDを挿入する
 \ '<cfile>': ['<C-p>'],	<C-r><C-p> 'path'を使って展開された事前のカー
				ソル位置のファイル名 (gfで編集するものと同様)
 \ }


------------------------------------------------------------------------------
関数						*alti-functions*

alti#on_insertstr_rm_arglead()		*alti#on_insertstr_rm_arglead()*
	insertstr関数|alti-define-insertstr|の中でしか呼ぶことが許されていない
	。現在入力されている文字列の中から ArgLead を除去する。これにより、
	insertstr関数が返す文字列がそのまま補完で挿入される文字列として扱われ
	るようになる。


alti#split2args({input})			*alti#split2args()*
	{input}文字列をバックスラッシュでエスケープされていない空白文字で分割
	したリストを返す。


						*alti#init()*
alti#init({define}, [{firstmessage}, [{bind}]])
	この関数にaltiの定義{define}(辞書)または定義{define}のリストを渡すと
	altiが実行される。
	文字列{firstmessage}を渡すと開始直後にのみそれが表示される。
	辞書{bind}を渡すと、{define}で指定した関数内での変数"self"にそれが
	使われる。(functionにdict属性をつけた場合のみ。詳しくは後述。)
	定義用の辞書{define}の要素は以下の通り。いずれも省略可能。

	default_text	(文字列)		*alti-define-default_text*
		既定 : ""
		開始時に標準で入力されているテキスト。
	static_head	(文字列)		*alti-define-static_head*
		既定 : ""
		default_textと似ているが削除されない。入力に何の影響も受けず、
		また与えないが、終了時に呼ばれる関数 submitted の第二引数とな
		る文字列の冒頭にこの文字列がくっつく。
	append_sep	(数値)			*alti-define-append_sep*
		既定 : 1
		非0なら、補完時に自動で空白を挟む。
	enter (関数の参照･グローバル関数名)	*alti-define-enter*
		alti開始前の、Altiバッファに移る前に呼ばれる関数である。
		元いたバッファの値を利用するときにこの関数内で取得するとよい。
		引数は取らない。
	cmpl (関数の参照･グローバル関数名)	*alti-define-cmpl*
		1つの引数{context}(辞書)|alti-Context|を取り、補完窓に表示させ
		る内容のリスト型を返す関数である。
		返値であるリストは、要素が文字列か辞書である。が、文字列である
		なら全て文字列、辞書であるなら全て辞書と、要素の方をそろえねば
		ならず、文字列と辞書を混在させることはできない。
		辞書を返す場合、辞書のキーは後に述べるものである。
		この辞書に独自のキーを作るときには、将来追加されるかも知れない
		キーのことを考慮して、キー名をアルファベット小文字以外で始める
		ことが推奨される。 >
		{
		  \ "Word": "表示・絞り込み・挿入に使われる文字列",
		  \ "View": "表示に使われる文字列 (省略可)",
		  \ "Search": "絞り込みに使われる文字列 (省略可)",
		  \ "Insert": "挿入に使われる文字列 (省略可)",
		  \ "Detail": "PrtDetailSelection()で表示される情報 (省略可)"
		}
<		"View" "Search" "Insert"が優先され、その要素がないとき"Word"が
		使われる。
			NOTE: この機能は一部未実装である。
		また、|alti-define-insertstr|関数を変更することで候補について
		の注釈を付加したり高度な補完を実現することが可能。
		既定関数は空リストを返す。
	prompt (関数の参照･グローバル関数名)	*alti-define-prompt*
		|alti-define-cmpl|と同じく1つの引数{context}(辞書)を取り
		|alti-Context|、プロンプト文字列を返す関数である。入力に応じて
		プロンプトを変化させることが可能になる。既定関数が返すプロンプ
		ト文字列は ">>> " である。
	insertstr (関数の参照･グローバル関数名)	*alti-define-insertstr*
		既定 : "alti#insertstr_posttab_annotation"
		この関数は2つ引数を取る。1つ目は {context}(辞書)|alti-Context|
		2つ目は {selected}(選ばれた候補文字列) である。
		選択された候補で補完を実行するとき呼ばれ、補完を完成させる。
		通常次のように SelectedCandidate の先頭から ArgLead を除いた値
		を返すようにする。 >
		  function! alti#insertstr_raw_norm_arglead(context, selected)
		    return substitute(a:selected, '^'.a:context.arglead,'','')
		  endfunction
<		これはこの関数の返値が実際に挿入される文字列であるためである。
		つまり、"arg"まで入力されている状態で"argument"という候補で補
		完を実行した場合、実際に入力される文字列は"ument"でなければな
		らないのでSelectedCandidate("argument")からArgLead("arg")を除
		去するようにする。ただし、このinserstr関数内でのみ機能する関数
		|alti#on_insertstr_rm_arglead()|を呼んでいるのなら、
		ArgLeadを除く操作をせず、返値がそのまま挿入される補完の文字列
		となる。 >
		  function! alti#insertstr_raw_rm_arglead(context, selected)
		    call alti#on_insertstr_rm_arglead()
		    return a:selected
		  endfunction
<		既定値は "alti#insertstr_posttab_annotation" である。これは、
		タブ文字以降を削除する関数である。これにより、候補の後にタブ文
		字を挟んで注釈を付けられるようにすることを意図している。標準で
		insertstr関数として利用できる関数が複数用意されている。
		詳しくは|alti-insertstr-functions|を参照。
	submitted (関数の参照･グローバル関数名)	*alti-define-submitted*
		Submitされた後に呼ばれる関数。2つないし3つ仮引数(パラメータ)が
		定義され、その数だけの実引数を取る。
		1つ目は {context}(辞書)|alti-Context|である。
		2つ目は {line}(static_head + alti終了時に入力されていた文字列)
		である。
		3つ目は{lastselected}である。これは Alti 終了時にカーソルの当
		たっていた(挿入されていない)補完候補文字列である。この仮引数は
		省略することができる。
		既定関数は入力文字列が空でなければ|:execute|する。
	canceled (関数の参照･グローバル関数名)	*alti-define-canceled*
		キャンセルされた後に呼ばれる関数。submittedと同じく引数を2つ取
		る。内容はsubmittedのものと同じである。既定関数は何もしない。
	bind		(辞書)			*alti-define-bind*
		既定 : {}
		alti内部で実行されるユーザ定義辞書の "self" にこれが代入される
		ようになる。
		|alti#init()|の第三引数 {bind} が同時に渡されていた場合は、両
		者が合成される。共通のkeyがあった場合は {bind} の方が優先され
		る。

	関数名に指定した関数にはdict属性を指定しても良い。そうした場合、"self"
	変数が利用できる。この"self"変数は初期値は空の辞書で、他のaltiの関数内
	でも同じものを参照できる。|alti#init()|の第三引数{bind}を渡すとそれが
	"self"に代入される。altiが終了されるまで(submitted関数と、canceled関数
	の終了まで)で有効。 >
		function! alti#xxx#enter() dict
		  let self.filetype = &filetype
		endfunction
		function! alti#xxx#cmpl() dict
		  return map(['a', 'b', 'c'], 'v:val. '.'.self.filetype')
		endfunction
<


--------------------------------------
						*alti-insertstr-functions*
以下の関数の関数名は|alti-define-insertstr|の値として利用することが出来る。

					*alti#insertstr_posttab_annotation()*
	alti#insertstr_posttab_annotation({context}, {selected})
		|alti-define-insertstr|の既定関数である。
		タブ文字以降を無視するので、タブ文字以降を候補の注釈とすること
		が可能。


					*alti#insertstr_pretab_annotation()*
	alti#insertstr_pretab_annotation({context}, {selected})
		タブ文字以前を無視するので、タブ文字以前を候補の注釈とすること
		が可能。


						*alti#insertstr_raw()*
	alti#insertstr_raw({context}, {selected})
		候補をそのまま補完として挿入する。


==============================================================================
Altiインターフェイス				*alti-Alti-interface*

Altiキーマッピング				*alti-Alti-key-mappings*

altiバッファ内で標準で定義されるキーマッピングの名称と説明である。
|g:alti_default_mappings_base|に "standard" か "ctrlplike" を定義することで標
準のキーマッピングを選択することが出来る。
また、|g:alti_prompt_mappings|で標準で定義されたキーマッピングを上書きすること
が出来る。

	PrtBS()			入力をカーソル前方1文字削除
		standard :		['<BS>', '<C-h>']
		ctrlplike :		['<BS>', '<C-]>']
	PrtDelete()		入力をカーソル後方1文字削除
		standard :		['<Del>', '<C-d>']
		ctrlplike :		['<Del>']
	PrtDeleteWord()		入力の1単語を削除
		standard :		['<C-w>']
		ctrlplike :		['<C-w>']
	PrtClear()		入力をクリアする
		standard :		['<C-u>']
		ctrlplike :		['<C-u>']
	PrtInsertReg()		レジスタ挿入モードになる
				|g:alti_getreg_mappings|参照
		standard :		['<C-r>']
		ctrlplike :		['<C-r>', '<C-\>']
	PrtHistory(-1)		履歴を先に進める
		standard :		['<C-x><C-n>']
		ctrlplike :		['<C-n>']
	PrtSmartHistory(-1)	履歴を先に進めるが、進められなければ、選択候補
				を入力欄に挿入
		standard :		[]
		ctrlplike :		[]
	PrtHistory(1)		履歴を前に遡る
		standard :		['<C-x><C-p>']
		ctrlplike :		['<C-p>']
	PrtCurStart()		入力欄の先頭へ
		standard :		['<C-a>']
		ctrlplike :		['<C-a>']
	PrtCurEnd()		入力欄の末尾へ
		standard :		['<C-e>']
		ctrlplike :		['<C-e>']
	PrtCurLeft()		入力欄カーソルを左へ
		standard :		['<C-b>', '<Left>']
		ctrlplike :		['<C-h>', '<Left>']
	PrtCurRight()		入力欄カーソルを右へ
		standard :		['<C-f>', '<Right>']
		ctrlplike :		['<C-l>', '<Right>']
	PrtPage(1)	候補が多すぎて窓に入り切らないとき、次ページへとめくる
		standard :		['<C-j>', '<PageDown>', '<kPageDown>']
		ctrlplike :		['<C-f>', '<PageDown>', '<kPageDown>']
	PrtPage(-1)	候補が多すぎて窓に入り切らないとき、前ページへとめくる
		standard :		['<C-k>', '<PageUp>', '<kPageUp>']
		ctrlplike :		['<C-b>', '<PageUp>', '<kPageUp>']
	PrtSelectMove("j")	候補窓の選択を1つ下へ
		standard :		['<C-n>', '<Down>']
		ctrlplike :		['<C-j>', '<Down>']
	PrtSelectMove("k")	候補窓の選択を1つ上へ
		standard :		['<C-p>', '<Down>']
		ctrlplike :		['<C-j>', '<Down>']
	PrtSelectMove("t")	候補窓の先頭へ
		standard :		['<Home>', '<kHome>']
		ctrlplike :		['<Home>', '<kHome>']
	PrtSelectMove("b")	候補窓の末尾へ
		standard :		['<End>', '<End>']
		ctrlplike :		['<End>', '<End>']
	PrtInsertSelection()	選択候補を入力欄へ挿入
		standard :		['<Tab>']
		ctrlplike :		['<Tab>']
	PrtInsertSelection({char})
				選択候補を入力欄へ挿入。候補がないときや、エス
				ケープ文字 "\" が直前に存在するときには代わり
				に文字{char}を挿入する。
		standard :		Undefined
		ctrlplike :		Undefined
	PrtExit()		キャンセルしてalti終了
		standard :		['<Esc>', '<C-c>']
		ctrlplike :		['<Esc>', '<C-c>']
	PrtSubmit()		確定してalti終了
		standard :		['<CR>']
		ctrlplike :		['<CR>']
	ToggleType(1)	複数のタイプを持つ定義のタイプを次のタイプに切り替える
		standard :		['<C-x><C-f>', '<C-]>', '<C-Down>']
		ctrlplike :		['<C-x><C-f>', '<C-Down>']
	ToggleType(-1)	複数のタイプを持つ定義のタイプを前のタイプに切り替える
		standard :		['<C-x><C-b>', '<C-\>', '<C-Up>']
		ctrlplike :		['<C-x><C-b>', '<C-Up>']


------------------------------------------------------------------------------
Context						*alti-Context*

Contextは|alti#init()|に渡す定義{define}の中で、cmpl, prompt, insertstr,
submitted, canceled の関数の第一引数として渡される辞書である。
これらの関数の挙動はこの辞書の要素を利用すれば細かく定義することができる。
以下の要素を持つ。

Context.arglead		補完対象の文字列
Context.precursor	カーソルより前の文字列
Context.postcursor	カーソルを含むカーソルより後の文字列
Context.inputline	入力文字列全体
Context.inputs		入力された文字列を非エスケープ空白で分割したリスト
Context.leftwords	カーソル前の文字列を非エスケープ空白で分割したリスト
Context.leftcount	カーソルより前にある単語の数。入力中のものは含めない。
Context.cursoridx	カーソルの位置(バイト単位のインデックス)

Context.filtered({candidates})
	補完候補リスト{candidates}から、文脈に応じて不要なものを削除したリスト
	を返す。文脈とは、既に入力されている文字列や補完対象の文字列(arglead)
	などである。argleadに前方一致マッチする候補が使われる。
	補完候補リスト{candidates}の要素は、文字列か、リストである。
	文字列の場合、例えば以下のようなリストを渡すと、 >
		["foo", "bar", "baz", "qux"]
<	補完候補は "foo" "bar" "baz" "qux" から絞り込まれる。
	リストを渡す場合、その第一要素は補完候補文字列、第二要素以降はその補完
	候補が所属するグループである。
	グループは排他的な候補を作るのに利用する。 >
		["foo", ["bar", "BARZ"], ["baz", "BARZ"], "qux"]
<	この場合、"foo" "bar" "baz" "qux" という候補があり、"bar" と "baz" は
	"BARZ" というグループに属している。、コマンドラインに "bar" "baz" のい
	ずれかが既に入力されているなら、もう片方も補完候補から除外される。
	グループの指定を複数することができる。それには第二要素をリストにするか
	、第三要素以降を利用する。以下の2種類の指定は同じ結果となる。 >
		[["foo", ["A","B"]], ["bar", "A"], ["baz", "B"], "qux"]
		[["foo", "A","B"], ["bar", "A"], ["baz", "B"], "qux"]
<	この場合、"foo" は "A" "B" 両グループに所属するので、"bar" "baz" のど
	ちらかが入力されていると候補に現れないし、 "foo" が入力されているのな
	ら "bar" "baz" は補完候補から除外される。
	特殊なグループとして "__PARM" というものがある。このグループに所属して
	いる補完候補は既に自身や同じグループの候補がコマンドラインに入力されて
	いても、構わず補完候補に現れる。例えば、 >
		[["foo", ["__PARM","A"]], ["bar", "A"], ["baz", "A"], "qux"]
<	の場合、既にコマンドラインに "foo" が入力されていても、 "bar" や "baz"
	が入力されていても、候補には常に "foo" が表示される。ただし AlgLeadの
	絞り込みの影響は受ける。
	グループ名には文字列、数値、浮動小数点数が使える。文字列の場合は空文字
	は利用できない。また、アンダースコアを頭に2つ付けた名前は予約されてい
	る。

Context.backward_filtered({candidates})
	|Context.filtered()|と同じだが arglead に前方一致ではなく後方一致で絞
	り込む。

Context.partial_filtered({candidates})
	|Context.filtered()|と同じだが arglead に前方一致ではなく部分一致で絞
	り込む。

Context.fuzzy_filtered({candidates})
	|Context.filtered()|と同じだが arglead に前方一致ではなく曖昧一致で絞
	り込む。曖昧一致とは、例えば "fbr" という arglead に対して、"foobar"
	"february" "quxfoobarbaz" などの候補が絞り込まれる。



==============================================================================
TODO						*alti-todo*

- ハイライトをもう少しどうにかしたい。
- エントリの削除やソートというアクションの実装
- デフォルトキーマッピングの見直し
	- <C-z>(<C-s>)<C-x>ソート (is_sortableオプションを付ける (cmpl関数でそ
	ういうアクションがあったことを受け取らせる))
- ヴァーチャルなinputline
- 区切り文字(<Space>)でPrtSelectInsertを兼用


==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:
